#
library(tidyverse) # Load the tidyverse packages
library(Hmisc) # Needed for correlation
library(MASS) # Needed for maths functions
library(car) # Needed for VIF calculation
library(olsrr) # Needed for stepwise regression
library(performance) # Needed to check model assumptions
#
MRes_tut2 <- read_csv("https://raw.githubusercontent.com/ajstewartlang/10_glm_regression_pt2/master/data/MRes_tut2.csv")MRes_tut2 <- read_csv("https://raw.githubusercontent.com/ajstewartlang/10_glm_regression_pt2/master/data/MRes_tut2.csv")
#
MRes_tut2 <- read_csv("https://raw.githubusercontent.com/ajstewartlang/10_glm_regression_pt2/master/data/MRes_tut2.csv")MRes_tut2 <- read_csv("https://raw.githubusercontent.com/ajstewartlang/10_glm_regression_pt2/master/data/MRes_tut2.csv")
#
MRes_tut2 <- read_csv("https://raw.githubusercontent.com/ajstewartlang/10_glm_regression_pt2/master/data/MRes_tut2.csv")
ggplot(MRes_tut2, aes(x = age, y = corr_spell)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
theme(text = element_text(size = 13))
ggplot(MRes_tut2, aes(x = RA, y = corr_spell)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
theme(text = element_text(size = 13))
ggplot(MRes_tut2, aes(x = std_RA, y = corr_spell)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
theme(text = element_text(size = 13))
ggplot(MRes_tut2, aes(x = std_SPELL, y = corr_spell)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
theme(text = element_text(size = 13))
View(MRes_tut2)
model0 <- lm(corr_spell ~ 1, data = MRes_tut2)
model1 <- lm(corr_spell ~ age + RA + std_RA + std_SPELL, data = MRes_tut2)
anova(model0, model1)
check_model(model1)
MRes_tut2_drop10 <- filter(MRes_tut2, case != "10")
model2 <- lm(corr_spell ~ age + RA + std_RA + std_SPELL, data = MRes_tut2_drop10)
check_model(model2)
vif(model2)
rcorr(MRes_tut2_drop10$RA, MRes_tut2_drop10$std_RA)
vif(model3)
model3 <- lm(corr_spell ~ age + std_RA + std_SPELL, data = MRes_tut2_drop10)
vif(model3)
check_model(model3)
summary(model3)
model0 <- lm(corr_spell ~ 1, data = MRes_tut2_drop10)
anova(model3, model0)
model0 <- lm(corr_spell ~ 1, data = MRes_tut2_drop10)
model1 <- lm(corr_spell ~ age + std_RA + std_SPELL, data = MRes_tut2_drop10)
steplimitsf <- step(model0, scope = list (lower = model0, upper = model1), direction = "forward")
summary(steplimitsf)
steplimitsb <- step(model1, direction = "back")
summary(steplimitsb)
steplimitsboth <- step(model0, scope = list (upper = model1), direction = "both")
check_model(steplimitsboth)
summary(steplimitsboth)
pmodel
pmodel <- ols_step_forward_p(model1)
pmodel <- ols_step_forward_p(model1)
ols_step_forward_p
library(olsrr)
pmodel <- ols_step_forward_p(model1)
install.packages("olsrr")
library(olsrr)
pmodel <- ols_step_forward_p(model1)
pmodel
# the factors that best predict the rating of coffee
# load the packages
library(tidyverse) # Load the tidyverse packages
library(Hmisc) # Needed for correlation
library(MASS) # Needed for maths functions
library(car) # Needed for VIF calculation
library(olsrr) # Needed for stepwise regression
library(performance) # Needed to check model assumptions
# read in the data
coffee_ratings <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-07-07/coffee_ratings.csv')
View(coffee_ratings)
library(ggcorrplot)
install.packages(ggcorrplot)
install.packages("ggcorrplot")
library(ggcorrplot) # Needed to draw correlation heatmaps\
corr <- cor(dplyr::select,total_cup_points, aroma, aftertaste, acidity, body, balance, sweetness, uniformity, clean_cup, and moisture)
?dplyr::select
(coffee_ratings, c(total_cup_points, aroma, aftertaste, acidity, body, balance, sweetness, uniformity, clean_cup, moisture))
coffee_ratings %>%
dplyr::select(c(total_cup_points, aroma, aftertaste, acidity, body, balance, sweetness, uniformity, clean_cup, moisture))
# read in the data
coffee_ratings <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-07-07/coffee_ratings.csv')
dplyr::select(coffee_ratings, c(total_cup_points, aroma, aftertaste, acidity, body, balance, sweetness, uniformity, clean_cup, moisture))
corr <- cor(dplyr::select(coffee_ratings, c(total_cup_points, aroma, aftertaste, acidity, body, balance, sweetness, uniformity, clean_cup, moisture)))
ggcorrplot(corr, hc.order = TRUE,
type = "lower", lab = TRUE)
ggcorrplot(corr, lab = TRUE)
ggcorrplot(corr, type = "lower", lab = TRUE)
relavent_factors <- dplyr::select(coffee_ratings, c(total_cup_points, aroma, aftertaste, acidity, body, balance, sweetness, uniformity, clean_cup, moisture))
corr <- cor(relavent_factors)
ggcorrplot(corr, type = "lower", lab = TRUE)
flavour_relavent_factors <- dplyr::select(coffee_ratings, c(total_cup_points, aroma, aftertaste, acidity, body, balance, sweetness, uniformity, clean_cup, moisture))
corr <- cor(relavent_factors)
ggcorrplot(corr, type = "lower", lab = TRUE)
model0 <- lm(total_cup_point ~ 1, data = flavour_relavent_factors)
model0 <- lm(total_cup_points ~ 1, data = flavour_relavent_factors)
model1 <- lm(total_cup_points ~ aroma + aftertaste + acidity + body + balance + sweetness + uniformity + clean_cup, data = MRes_tut2)
model1 <- lm(total_cup_points ~ aroma + aftertaste + acidity + body + balance + sweetness + uniformity + clean_cup, data = flavour_relavent_factors)
anova(model0, model1)
model0 <- lm(total_cup_points ~ 1, data = flavour_relavent_factors)
model1 <- lm(total_cup_points ~ aroma + aftertaste + acidity + body + balance + sweetness + uniformity + clean_cup, data = flavour_relavent_factors)
anova(model0, model1)
check_model(model1)
vif(model1)
steplimitsboth <- step(model0, scope = list (lower = model0, upper = model1), direction = "both")
check_model(steplimitsboth)
summary(steplimitsboth)
pmodel <- ols_step_forward_p(model1)
View(coffee_ratings)
flavour_relavent_factors <- dplyr::select(flavour , c(total_cup_points, aroma, aftertaste, acidity, body, balance, sweetness, uniformity, clean_cup, moisture))
flavour_relavent_factors <- dplyr::select(flavor , c(total_cup_points, aroma, aftertaste, acidity, body, balance, sweetness, uniformity, clean_cup, moisture))
# read in the data
coffee_ratings <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-07-07/coffee_ratings.csv')
View(coffee_ratings)
flavour_relavent_factors <- dplyr::select(flavor , c(total_cup_points, aroma, aftertaste, acidity, body, balance, sweetness, uniformity, clean_cup, moisture))
pmodel <- ols_step_forward_p(model1)
# read in the data
coffee_ratings <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-07-07/coffee_ratings.csv')
flavour_relavent_factors <- dplyr::select(flavor , c(total_cup_points, aroma, aftertaste, acidity, body, balance, sweetness, uniformity, clean_cup, moisture))
View(coffee_ratings)
flavour_relavent_factors <- dplyr::select(flavour , c(total_cup_points, aroma, aftertaste, acidity, body, balance, sweetness, uniformity, clean_cup, moisture))
flavour_relavent_factors <- dplyr::select(coffee_ratings, c(flavour, aroma, aftertaste, acidity, body, balance, sweetness, uniformity, clean_cup, moisture))
flavour_relavent_factors <- dplyr::select(coffee_ratings, c(flavor, aroma, aftertaste, acidity, body, balance, sweetness, uniformity, clean_cup, moisture))
corr <- cor(relavent_factors)
ggcorrplot(corr, type = "lower", lab = TRUE)
model0 <- lm(flavor ~ 1, data = flavour_relavent_factors)
model1 <- lm(flavor ~ aroma + aftertaste + acidity + body + balance + sweetness + uniformity + clean_cup, data = flavour_relavent_factors)
anova(model0, model1)
check_model(model1)
flavour_relavent_factors %>%
ggplot(x = flavour y = aroma) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
theme(text = element_text(size = 13))
flavour_relavent_factors %>%
ggplot(aes(x = flavour y = aroma)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
theme(text = element_text(size = 13))
ggplot(flavour_relavent_factors, aes(x = flavour y = aroma)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
theme(text = element_text(size = 13))
ggplot(flavour_relavent_factors, aes(x = flavor y = aroma)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
theme(text = element_text(size = 13))
ggplot(flavour_relavent_factors, aes(x = flavor y = aroma)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
theme(text = element_text(size = 13))
View(flavour_relavent_factors)
ggplot(flavour_relavent_factors, aes(x = flavor y = aroma)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
theme(text = element_text(size = 13))
ggplot(flavour_relavent_factors, aes(x = flavor y = aroma)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
model0 <- lm(flavor ~ 1, data = flavour_relavent_factors)
ggplot(flavour_relavent_factors, aes(x = flavor y = aroma)) +
geom_point() +
model0 <- lm(flavor ~ 1, data = flavour_relavent_factors)
ggplot(flavour_relavent_factors, aes(x = flavor y = aroma)) +
geom_point() +
model0 <- lm(flavor ~ 1, data = flavour_relavent_factors)
ggplot(flavour_relavent_factors, aes(x = flavor y = aroma)) +
geom_point() +
model0 <- lm(flavor ~ 1, data = flavour_relavent_factors)
ggplot(flavour_relavent_factors, aes(x = flavor y = aroma)) +
geom_point() +
model0 <- lm(flavor ~ 1, data = flavour_relavent_factors)
ggplot(flavour_relavent_factors, aes(x = flavor y = aroma)) +
geom_point()
ggplot(flavour_relavent_factors, aes(x = flavor y = aroma)) +
geom_point()
ggplot(flavour_relavent_factors, aes(x = flavor y = aroma)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
theme(text = element_text(size = 13))
ggplot(flavour_relavent_factors, aes(x = flavor y = aroma)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
theme(text = element_text(size = 13))
ggplot(flavour_relavent_factors, aes(x = flavor, y = aroma)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
theme(text = element_text(size = 13))
ggplot(flavour_relavent_factors, aes(x = flavor, y = aftertaste)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
theme(text = element_text(size = 13))
flavour_relavent_factors_drop0 <- filter(flavour_relavent_factors, flavor != "0")
ggplot(flavour_relavent_factors_drop0, aes(x = flavor, y = aroma)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
theme(text = element_text(size = 13))
ggplot(flavour_relavent_factors_drop0, aes(x = flavor, y = aftertaste)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
theme(text = element_text(size = 13))
ggplot(flavour_relavent_factors_drop0, aes(x = flavor, y = acidity)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
theme(text = element_text(size = 13))
ggplot(flavour_relavent_factors_drop0, aes(x = flavor, y = body)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
theme(text = element_text(size = 13))
ggplot(flavour_relavent_factors_drop0, aes(x = flavor, y = balance)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
theme(text = element_text(size = 13))
ggplot(flavour_relavent_factors_drop0, aes(x = flavor, y = sweetness)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
theme(text = element_text(size = 13))
ggplot(flavour_relavent_factors_drop0, aes(x = flavor, y = unifomity)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
theme(text = element_text(size = 13))
ggplot(flavour_relavent_factors_drop0, aes(x = flavor, y = uniformity)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
theme(text = element_text(size = 13))
ggplot(flavour_relavent_factors_drop0, aes(x = flavor, y = clean_cup)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
theme(text = element_text(size = 13))
ggplot(flavour_relavent_factors_drop0, aes(x = flavor, y = moisture)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
theme(text = element_text(size = 13))
check_model(model1)
model0 <- lm(flavor ~ 1, data = flavour_relavent_factors)
model1 <- lm(flavor ~ aroma + aftertaste + acidity + body + balance + sweetness + uniformity + clean_cup, data = flavour_relavent_factors)
anova(model0, model1)
check_model(model1)
model0 <- lm(flavor ~ 1, data = flavour_relavent_factors_drop0)
model1 <- lm(flavor ~ aroma + aftertaste + acidity + body + balance + sweetness + uniformity + clean_cup, data = flavour_relavent_factors_drop0)
anova(model0, model1)
check_model(model1)
vif(model1)
steplimitsboth <- step(model0, scope = list (lower = model0, upper = model1), direction = "both")
check_model(steplimitsboth)
summary(steplimitsboth)
pmodel <- ols_step_forward_p(model1)
pmodel
check_model(model1)
corr <- cor(relavent_factors)
ggcorrplot(corr, type = "lower", lab = TRUE)
corr_drop0 <- cor(flavour_relavent_factors_drop0)
ggcorrplot(corr_drop0, type = "lower", lab = TRUE)
check_model(model1)
vif(model1)
check_model(model1)
vif(model1)
steplimitsboth <- step(model0, scope = list (lower = model0, upper = model1), direction = "both")
summary(steplimitsboth)
pmodel <- ols_step_forward_p(model1)
pmodel
model2 <- lm(flavor ~ aftertaste + aroma + acidity + balance + clean_cup + body)
model2 <- lm(flavor ~ aftertaste + aroma + acidity + balance + clean_cup + body, data = flavour_relavent_factors_drop0)
anova(model1, model2)
vif(model1)
summary(steplimitsboth)
model2 <- lm(flavor ~ aftertaste + aroma + acidity + balance + clean_cup + body, data = flavour_relavent_factors_drop0)
anova(model1, model2)
pmodel <- ols_step_forward_p(model1)
pmodel
ggcorrplot(corr_drop0, type = "lower", lab = TRUE)
summary(steplimitsboth)
model2 <- lm(flavor ~ aftertaste + aroma + acidity + balance + clean_cup + body, data = flavour_relavent_factors_drop0)
anova(model1, model2)
steplimitsboth <- step(model0, scope = list (lower = model0, upper = model1), direction = "both")
check_model(steplimitsboth)
summary(steplimitsboth)
model2 <- lm(flavor ~ aftertaste + aroma + acidity + balance + clean_cup + body, data = flavour_relavent_factors_drop0)
anova(model1, model2)
AIC(model2)
AIC(model1)
pmodel
newdata <- c(aroma = 8, acidity = 7, body = 5, balance = 9, uniformity = 6, clean_cup = 9)
plot(pmodel)
k$pmodel
?ols_step_forward_p
k$pmodel
pmodel(model)
pmodel$model
predict(model4, newdata)
model4 <- lm(flavor ~ aroma + acidity + body + balance + clean_up + uniformity, data = coffee_filtered)
model4 <- lm(flavor ~ aroma + acidity + body + balance + clean_up + uniformity, flavour_relavent_factors_drop0)
model4 <- lm(flavor ~ aroma + acidity + body + balance + clean_cup + uniformity, flavour_relavent_factors_drop0)
newdata <- c(aroma = 8, acidity = 7, body = 5, balance = 9, uniformity = 6, clean_cup = 9)
predict(model4, newdata)
newdata <- data.frame(aroma = 8, acidity = 7, body = 5, balance = 9, uniformity = 6, clean_cup = 9)
predict(model4, newdata)
model1 <- lm(flavor ~ aroma + aftertaste + acidity + body + balance + sweetness + uniformity + clean_cup + moisture, data = flavour_relavent_factors_drop0)
anova(model0, model1)
check_model(model1)
vif(model1)
steplimitsboth <- step(model0, scope = list (lower = model0, upper = model1), direction = "both")
check_model(steplimitsboth)
summary(steplimitsboth)
model2 <- lm(flavor ~ aftertaste + aroma + acidity + balance + clean_cup + body, data = flavour_relavent_factors_drop0)
anova(model1, model2)
AIC(model1)
AIC(model2)
pmodel <- ols_step_forward_p(model1)
plot(pmodel)
model4 <- lm(flavor ~ aroma + acidity + body + balance + clean_cup + uniformity, flavour_relavent_factors_drop0)
newdata <- data.frame(aroma = 8, acidity = 7, body = 5, balance = 9, uniformity = 6, clean_cup = 9)
predict(model4, newdata)
ggcorrplot(corr, type = "lower", lab = TRUE)
ggplot(flavour_relavent_factors_drop0, aes(x = accidity, y = aroma)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
theme(text = element_text(size = 13))
ggplot(flavour_relavent_factors_drop0, aes(x = acidity, y = aroma)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
theme(text = element_text(size = 13))
pmodel$k
corr <- cor(relavent_factors)
ggcorrplot(corr, type = "lower", lab = TRUE)
