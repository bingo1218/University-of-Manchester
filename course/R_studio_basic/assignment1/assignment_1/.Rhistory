guides(colour = 'none') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, vjust = 5, hjust = .5)) +
labs(title = "Response Time among Different Conditions",
x = "Condtion (Expectation_Target)",
y = "Response Time (ms)")
experiment_data_longer %>%
ggplot(aes(x = Condition, y = RT, colour = Condition)) +
geom_violin() +
geom_jitter(width = .2, alpha = .45, size = 2) +
geom_boxplot(alpha = .5) +
guides(colour = 'none') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, vjust = 5, hjust = .5)) +
labs(title = "Response Time among Different Conditions",
x = "Condtion (Expectation_Target)",
y = "Response Time (ms)")
## test for facet_wrap
mpg %>%
ggplot(aes(x = manufacturer, y = displ, colour= class)) +
geom_jitter(width = .2, alpha = .45, size = 2)
## test for facet_wrap
mpg %>%
ggplot(aes(x = manufacturer, y = displ, colour= class)) +
geom_point(width = .2, alpha = .45, size = 2)
## test for facet_wrap
mpg %>%
ggplot(aes(x = manufacturer, y = displ, colour= class)) +
geom_point( alpha = .45, size = 2)
## test for facet_wrap
mpg %>%
ggplot(aes(x = manufacturer, y = displ, colour= class)) +
geom_point(alpha = .45, size = 2, fill = "white")
## test for facet_wrap
mpg %>%
ggplot(aes(x = manufacturer, y = displ, colour= class)) +
geom_point(alpha = .45, size = 2, fill = "white")
?geom_point
## test for facet_wrap
mpg %>%
ggplot(aes(x = manufacturer, y = displ, colour= class, fill = "white")) +
geom_point(alpha = .45, size = 2)
## test for facet_wrap
mpg %>%
ggplot(aes(x = manufacturer, y = displ, colour= class)) +
geom_point(alpha = .45, size = 2, fill = "white")
## test for facet_wrap
mpg %>%
ggplot(aes(x = manufacturer, y = displ, colour= class)) +
facet_wrap(~class)
## test for facet_wrap
mpg %>%
ggplot(aes(x = manufacturer, y = displ)) +
facet_wrap(~class)
## test for facet_wrap
mpg %>%
ggplot(aes(x = manufacturer, y = displ)) +
geom_point() +
facet_wrap(~class)
## test for facet_wrap
mpg %>%
ggplot(aes(x = manufacturer, y = displ)) +
geom_point() +
facet_wrap(~manufactuere)
## test for facet_wrap
mpg %>%
ggplot(aes(x = manufacturer, y = displ)) +
geom_point() +
facet_wrap(~manufacturer)
## test for facet_wrap
mpg %>%
ggplot(aes(x = hmy, y = displ)) +
geom_point() +
facet_wrap(~manufacturer)
## test for facet_wrap
mpg %>%
ggplot(aes(x = hwy, y = displ)) +
geom_point() +
facet_wrap(~manufacturer)
## test for facet_wrap
mpg %>%
ggplot(aes(x = hwy, y = displ)) +
geom_point() +
facet_wrap(drv~manufacturer)
## test for facet_wrap
mpg %>%
ggplot(aes(x = hwy, y = displ)) +
geom_point() +
facet_wrap(.~manufacturer)
## test for facet_wrap
mpg %>%
ggplot(aes(x = hwy, y = displ)) +
geom_point() +
facet_wrap(~manufacturer)
## test for facet_wrap
mpg %>%
ggplot(aes(x = hwy, y = displ)) +
geom_point() +
facet_grid(~manufacturer)
## test for facet_wrap
mpg %>%
ggplot(aes(x = hwy, y = displ)) +
geom_point() +
facet_grid(.~manufacturer)
## test for facet_wrap
mpg %>%
ggplot(aes(x = hwy, y = displ)) +
geom_point() +
facet_wrap(~hwy)
?mpg
## test for facet_wrap
mpg %>%
ggplot(aes(x = hwy, y = displ)) +
geom_point() +
facet_wrap(~cty)
##
ggplot(data = mpg) +
geom_point(mapping = aes(x = drv, y = cyl))
##
ggplot(data = mpg) +
geom_point(mapping = aes(x = drv, y = cyl)) +
facet_grid(drv ~ .)
##
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ .)
##
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(.~drv)
experiment_data_longer %>%
ggplot(aes(x = Condition, y = RT)) +
geom_line(aes(group = ID))
experiment_data_longer %>%
ggplot(aes(x = Condition, y = RT)) +
geom_line(aes(group = ID))
experiment_data_longer %>%
ggplot(aes(x = Condition, y = RT)) +
geom_point() +
geom_line(aes(group = ID))
##
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(se = FALSE)
##
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth()
ggplot() +
geom_point(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_smooth(data = mpg, mapping = aes(x = displ, y = hwy))
mpg %>%
ggplot(aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth(se = FALSE)
mpg %>%
ggplot(aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth(aes(group = drv),se = FALSE)
mpg %>%
ggplot(aes(x = displ, y = hwy, colour = drv)) +
geom_point() +
geom_smooth(se = FALSE)
?geom_smooth
mpg %>%
ggplot(aes(x = displ, y = hwy, colour = drv)) +
geom_point() +
geom_smooth(aes(linetype = drv),se = FALSE)
mpg %>%
ggplot(aes(x = displ, y = hwy)) +
geom_point(aes(colour = drv)) +
geom_smooth(aes(linetype = drv),se = FALSE)
?geom_point
mpg %>%
ggplot(aes(x = displ, y = hwy, stroke = 1)) +
geom_point(aes(colour = drv))
mpg %>%
ggplot(aes(x = displ, y = hwy, stroke = 10)) +
geom_point(aes(colour = drv))
mpg %>%
ggplot(aes(x = displ, y = hwy, stroke = 1)) +
geom_point(aes(colour = drv))
mpg %>%
ggplot(aes(x = displ, y = hwy, stroke = 1,, fill = "white")) +
geom_point(aes(colour = drv))
mpg %>%
ggplot(aes(x = displ, y = hwy, stroke = 10,fill = "white")) +
geom_point(aes(colour = drv))
mpg %>%
ggplot(aes(x = displ, y = hwy, stroke = 1)) +
geom_point(aes(colour = drv, fill = "white"))
mpg %>%
ggplot(aes(x = displ, y = hwy, stroke = 1)) +
geom_point(aes(colour = drv), fill = "white")
mpg %>%
ggplot(aes(x = displ, y = hwy, stroke = 1)) +
geom_point(aes(colour = drv), shape = 21, colour = "black", fill = "white", size = 5, stroke = 5)
mpg %>%
ggplot(aes(x = displ, y = hwy, stroke = 1)) +
geom_point(aes(colour = drv), shape = 21, colour = "white", size = 2, stroke = 2)
mpg %>%
ggplot(aes(x = displ, y = hwy)) +
geom_point(aes(colour = drv), fill = drv, shape = 21, colour = "white", size = 2, stroke = 2)
mpg %>%
ggplot(aes(x = displ, y = hwy)) +
geom_point(aes(colour = drv), fill = "drv", shape = 21, colour = "white", size = 2, stroke = 2)
mpg %>%
ggplot(aes(x = displ, y = hwy)) +
geom_point(aes(colour = drv),  shape = 21, colour = "white", size = 2, stroke = 2)
mpg %>%
ggplot(aes(x = displ, y = hwy)) +
geom_point(aes(colour = drv), fill = colour, shape = 21, colour = "white", size = 2, stroke = 2)
mpg %>%
ggplot(aes(x = displ, y = hwy)) +
geom_point(aes(colour = drv, fill = colour,),  shape = 21, colour = "white", size = 2, stroke = 2)
mpg %>%
ggplot(aes(x = displ, y = hwy)) +
geom_point(aes(colour = drv, fill = color),  shape = 21, colour = "white", size = 2, stroke = 2)
mpg %>%
ggplot(aes(x = displ, y = hwy)) +
geom_point(aes(colour = drv, fill = drv),  shape = 21, colour = "white", size = 2, stroke = 2)
mpg %>%
ggplot(aes(x = displ, y = hwy)) +
geom_point(aes(colour = drv, fill = drv),  shape = 21, colour = "white", size = 2, stroke = 1)
mpg %>%
ggplot(aes(x = displ, y = hwy)) +
geom_point(aes(colour = drv, fill = drv),  shape = 21, colour = "white", size = 3, stroke = 1)
mpg %>%
ggplot(aes(x = displ, y = hwy)) +
geom_point(aes(colour = drv, fill = drv),  shape = 20, colour = "white", size = 3, stroke = 1)
mpg %>%
ggplot(aes(x = displ, y = hwy)) +
geom_point(aes(colour = drv, fill = drv),  shape = 21, colour = "white", size = 3, stroke = 1)
mpg %>%
ggplot(aes(x = displ, y = hwy)) +
geom_point(aes(colour = drv, fill = drv),  shape = 21, colour = "white", size = 3, stroke = 3)
mpg %>%
ggplot(aes(x = displ, y = hwy)) +
geom_point(aes(colour = drv, fill = drv),  shape = 21, colour = "white", size = 2, stroke = 2)
mpg %>%
ggplot(aes(x = displ, y = hwy)) +
geom_point(aes(colour = drv, fill = drv),  shape = 21, colour = "white", size = 3, stroke = 3)
mpg %>%
ggplot(aes(x = displ, y = hwy)) +
geom_point(aes(colour = drv, fill = drv),  shape = 21, colour = "white", size = 2.5, stroke = 2.5)
mpg %>%
ggplot(aes(x = displ, y = hwy)) +
geom_point(aes(fill = drv),  shape = 21, colour = "white", size = 2.5, stroke = 2.5)
mpg %>%
ggplot(aes(x = displ, y = hwy)) +
geom_point(aes(fill = drv),  shape = 21, colour = "white", size = 2.5, stroke = 2.5)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(Hmisc)
experiment_data <- read.csv("assignment_1_data.csv")
experiment_data_longer <- experiment_data %>%
pivot_longer(cols = c(Condition1, Condition2, Condition3, Condition4),
names_to = "Condition",
values_to = "RT") %>%
mutate(Condition = recode(Condition,
"Condition1" = "Num_Num",
"Condition2" = "Num_Let",
"Condition3" = "Let_Num",
"Condition4" = "Let_Let")) %>%
filter(!is.na(Condition))
experiment_data_longer %>%
group_by(Condition) %>%
summarise(mean_RT = mean(RT), sd_RT = sd(RT), median = median(RT), qs = quantile(RT, c(0.25, 0.75)), prob = c(0.25, 0.75), number = n())
?geom_bar
?stat_bin
demo <- tribble(
~cut,         ~freq,
"Fair",       1610,
"Good",       4906,
"Very Good",  12082,
"Premium",    13791,
"Ideal",      21551
)
ggplot(data = demo) +
geom_bar(mapping = aes(x = cut, y = freq), stat = "identity")
demo <- tribble(
~cut,         ~freq,
"Fair",       1610,
"Good",       4906,
"Very Good",  12082,
"Premium",    13791,
"Ideal",      21551
)
ggplot(data = demo) +
geom_bar(mapping = aes(x = cut, y = freq))
demo <- tribble(
~cut,         ~freq,
"Fair",       1610,
"Good",       4906,
"Very Good",  12082,
"Premium",    13791,
"Ideal",      21551
)
ggplot(data = demo) +
geom_bar(mapping = aes(x = cut, y = freq))
demo <- tribble(
~cut,         ~freq,
"Fair",       1610,
"Good",       4906,
"Very Good",  12082,
"Premium",    13791,
"Ideal",      21551
)
ggplot(data = demo) +
geom_bar(mapping = aes(x = cut))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = after_stat(prop)))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color, y = after_stat(prop)))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color, y = after_stat(prop),group = 1))
view(diamonds)
ggplot(data = diamonds) +
+     geom_bar(mapping = aes(x = cut))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = stat(prop), group = 1))
？stat_summary
?stat_summary
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_jitter()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_count()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_boxplot()
model1 <- lm(Violent_Crimes ~ 1, data = crime_filtered)
model2 <- lm(Violent_Crimes ~ Population, data = crime_filtered)
crime_filtered <- filter(crime_filtered, Year == 2015)
crime_filtered <- filter(crime, Population < 2000000)
head(crime)
crime <- read_csv("https://raw.githubusercontent.com/ajstewartlang/09_glm_regression_pt1/master/data/crime_dataset.csv")
head(crime)
head(crime)
crime <- crime %>%
rename(House_price = index_nsa) %>%
rename(Violent_Crimes = "Violent Crimes")
head(crime)
crime_filtered <- filter(crime, Population < 2000000)
crime_filtered <- filter(crime_filtered, Year == 2015)
model1 <- lm(Violent_Crimes ~ 1, data = crime_filtered)
model2 <- lm(Violent_Crimes ~ Population, data = crime_filtered)
check_model(model2)
library(tidyverse)
library(Hmisc)
library(performance)
check_model(model2)
library(tidyverse)
library(Hmisc)
library(performance)
crime <- read_csv("https://raw.githubusercontent.com/ajstewartlang/09_glm_regression_pt1/master/data/crime_dataset.csv")
head(crime)
crime <- crime %>%
rename(House_price = index_nsa) %>%
rename(Violent_Crimes = "Violent Crimes")
head(crime)
crime_filtered <- filter(crime, Population < 2000000)
crime_filtered <- filter(crime_filtered, Year == 2015)
model1 <- lm(Violent_Crimes ~ 1, data = crime_filtered)
model2 <- lm(Violent_Crimes ~ Population, data = crime_filtered)
check_model(model2)
install.packages(c("arm", "backports", "bayestestR", "broom", "cli", "conquer", "cpp11", "crayon", "data.table", "datawizard", "deSolve", "digest", "effectsize", "emmeans", "generics", "gsl", "Hmisc", "htmlTable", "htmltools", "htmlwidgets", "insight", "knitr", "lifecycle", "matrixStats", "MBESS", "mime", "mvtnorm", "nloptr", "openssl", "parameters", "pbapply", "performance", "PMCMR", "psych", "R6", "RcppArmadillo", "RCurl", "remotes", "rmarkdown", "rpf", "see", "sem", "stringi", "TH.data", "tinytex", "tzdb", "uuid", "vcd", "viridis", "vroom", "xfun"))
install.packages(c("arm", "backports", "bayestestR", "broom", "cli", "conquer", "cpp11", "crayon", "data.table", "datawizard", "deSolve", "digest", "effectsize", "emmeans", "generics", "gsl", "Hmisc", "htmlTable", "htmltools", "htmlwidgets", "insight", "knitr", "lifecycle", "matrixStats", "MBESS", "mime", "mvtnorm", "nloptr", "openssl", "parameters", "pbapply", "performance", "PMCMR", "psych", "R6", "RcppArmadillo", "RCurl", "remotes", "rmarkdown", "rpf", "see", "sem", "stringi", "TH.data", "tinytex", "tzdb", "uuid", "vcd", "viridis", "vroom", "xfun"))
install.packages(c("arm", "backports", "bayestestR", "broom", "cli", "conquer", "cpp11", "crayon", "data.table", "datawizard", "deSolve", "digest", "effectsize", "emmeans", "generics", "gsl", "Hmisc", "htmlTable", "htmltools", "htmlwidgets", "insight", "knitr", "lifecycle", "matrixStats", "MBESS", "mime", "mvtnorm", "nloptr", "openssl", "parameters", "pbapply", "performance", "PMCMR", "psych", "R6", "RcppArmadillo", "RCurl", "remotes", "rmarkdown", "rpf", "see", "sem", "stringi", "TH.data", "tinytex", "tzdb", "uuid", "vcd", "viridis", "vroom", "xfun"))
install.packages(c("arm", "backports", "bayestestR", "broom", "cli", "conquer", "cpp11", "crayon", "data.table", "datawizard", "deSolve", "digest", "effectsize", "emmeans", "generics", "gsl", "Hmisc", "htmlTable", "htmltools", "htmlwidgets", "insight", "knitr", "lifecycle", "matrixStats", "MBESS", "mime", "mvtnorm", "nloptr", "openssl", "parameters", "pbapply", "performance", "PMCMR", "psych", "R6", "RcppArmadillo", "RCurl", "remotes", "rmarkdown", "rpf", "see", "sem", "stringi", "TH.data", "tinytex", "tzdb", "uuid", "vcd", "viridis", "vroom", "xfun"))
install.packages(c("arm", "backports", "bayestestR", "broom", "cli", "conquer", "cpp11", "crayon", "data.table", "datawizard", "deSolve", "digest", "effectsize", "emmeans", "generics", "gsl", "Hmisc", "htmlTable", "htmltools", "htmlwidgets", "insight", "knitr", "lifecycle", "matrixStats", "MBESS", "mime", "mvtnorm", "nloptr", "openssl", "parameters", "pbapply", "performance", "PMCMR", "psych", "R6", "RcppArmadillo", "RCurl", "remotes", "rmarkdown", "rpf", "see", "sem", "stringi", "TH.data", "tinytex", "tzdb", "uuid", "vcd", "viridis", "vroom", "xfun"))
install.packages(c("arm", "backports", "bayestestR", "broom", "cli", "conquer", "cpp11", "crayon", "data.table", "datawizard", "deSolve", "digest", "effectsize", "emmeans", "generics", "gsl", "Hmisc", "htmlTable", "htmltools", "htmlwidgets", "insight", "knitr", "lifecycle", "matrixStats", "MBESS", "mime", "mvtnorm", "nloptr", "openssl", "parameters", "pbapply", "performance", "PMCMR", "psych", "R6", "RcppArmadillo", "RCurl", "remotes", "rmarkdown", "rpf", "see", "sem", "stringi", "TH.data", "tinytex", "tzdb", "uuid", "vcd", "viridis", "vroom", "xfun"))
install.packages(c("arm", "backports", "bayestestR", "broom", "cli", "conquer", "cpp11", "crayon", "data.table", "datawizard", "deSolve", "digest", "effectsize", "emmeans", "generics", "gsl", "Hmisc", "htmlTable", "htmltools", "htmlwidgets", "insight", "knitr", "lifecycle", "matrixStats", "MBESS", "mime", "mvtnorm", "nloptr", "openssl", "parameters", "pbapply", "performance", "PMCMR", "psych", "R6", "RcppArmadillo", "RCurl", "remotes", "rmarkdown", "rpf", "see", "sem", "stringi", "TH.data", "tinytex", "tzdb", "uuid", "vcd", "viridis", "vroom", "xfun"))
install.packages(c("arm", "backports", "bayestestR", "broom", "cli", "conquer", "cpp11", "crayon", "data.table", "datawizard", "deSolve", "digest", "effectsize", "emmeans", "generics", "gsl", "Hmisc", "htmlTable", "htmltools", "htmlwidgets", "insight", "knitr", "lifecycle", "matrixStats", "MBESS", "mime", "mvtnorm", "nloptr", "openssl", "parameters", "pbapply", "performance", "PMCMR", "psych", "R6", "RcppArmadillo", "RCurl", "remotes", "rmarkdown", "rpf", "see", "sem", "stringi", "TH.data", "tinytex", "tzdb", "uuid", "vcd", "viridis", "vroom", "xfun"))
install.packages(c("arm", "backports", "bayestestR", "broom", "cli", "conquer", "cpp11", "crayon", "data.table", "datawizard", "deSolve", "digest", "effectsize", "emmeans", "generics", "gsl", "Hmisc", "htmlTable", "htmltools", "htmlwidgets", "insight", "knitr", "lifecycle", "matrixStats", "MBESS", "mime", "mvtnorm", "nloptr", "openssl", "parameters", "pbapply", "performance", "PMCMR", "psych", "R6", "RcppArmadillo", "RCurl", "remotes", "rmarkdown", "rpf", "see", "sem", "stringi", "TH.data", "tinytex", "tzdb", "uuid", "vcd", "viridis", "vroom", "xfun"))
install.packages(c("arm", "backports", "bayestestR", "broom", "cli", "conquer", "cpp11", "crayon", "data.table", "datawizard", "deSolve", "digest", "effectsize", "emmeans", "generics", "gsl", "Hmisc", "htmlTable", "htmltools", "htmlwidgets", "insight", "knitr", "lifecycle", "matrixStats", "MBESS", "mime", "mvtnorm", "nloptr", "openssl", "parameters", "pbapply", "performance", "PMCMR", "psych", "R6", "RcppArmadillo", "RCurl", "remotes", "rmarkdown", "rpf", "see", "sem", "stringi", "TH.data", "tinytex", "tzdb", "uuid", "vcd", "viridis", "vroom", "xfun"))
library(tidyverse)
library(Hmisc) #to use rcorr()
#install.packages("performance")
library(performance)
#install.packages('see')
#library(see)
dataset1 <- read_csv("https://raw.githubusercontent.com/ajstewartlang/09_glm_regression_pt1/master/data/dataset1.csv")
model_0 <- lm(points ~ 1, data = dataset1)
model_1 <- lm(points ~ investment, data = dataset1)
anova(model_0,model_1)
performance::check_model(model_1)
#Error in grid.Call(C_convert, x, as.integer(whatfrom), as.integer(whatto),  :
#Viewport has zero dimension(s)
crime <- read_csv("https://raw.githubusercontent.com/ajstewartlang/09_glm_regression_pt1/master/data/crime_dataset.csv")
head(crime)
crime <- separate(crime, col = "City, State", into = c("City", "State"))
head(crime)
crime <- crime %>%
rename(House_price = index_nsa) %>%
rename(Violent_Crimes = `Violent Crimes`)
head(crime)
###scatter plot with regression line
crime %>%
ggplot(aes(x = Population, y = Violent_Crimes)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
theme(text = element_text(size = 13)) +
labs(x = "Population", y = "Violent Crimes")
#####Pearson's r
crime %>%
rcorr(Population,Violent_Crimes) #这样写为啥不行啊？
rcorr(crime$Population,crime$Violent_Crimes)
##From the plot, we might conclude that the relationship is being overly influenced by crime in a small number of very large cities
crime_filtered <- filter(crime, Population < 2000000)
crime_filtered %>%
ggplot(aes(x = Population, y = Violent_Crimes)) +
geom_point(alpha = .25) +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
theme(text = element_text(size = 13)) +
labs(x = "Population", y = "Violent Crimes")
rcorr(crime_filtered$Population, crime_filtered$Violent_Crimes)
#For regression, observation should be independent, but each city appears many times (once each year)
#so we just focus on year 2015
crime_filtered <- filter(crime_filtered, Year == 2015)
crime_filtered %>%
ggplot(aes(x=Population, y=Violent_Crimes, label=City)) +
geom_point() +
geom_text(nudge_y = 500, check_overlap = TRUE) +
#this layer is to plot the City names and ensure the lables don't overlap
geom_smooth(method = "lm", se = FALSE) +
xlim(0,1800000) +
theme_minimal() +
theme(text = element_text(size=13)) +
labs(x = "Population",
y = "Violent Crimes")
rcorr(crime_filtered$Population,crime_filtered$Violent_Crimes)
model1 <- lm(Violent_Crimes ~ 1, data = crime_filtered)
model2 <- lm(Violent_Crimes ~ Population, data = crime_filtered)
#worked
check_model(model2, panel = FALSE)
#Didn't work
check_model(model2)
summary(model2)
check_model(model2, panel = FALSE)
library(tidyverse)
library(Hmisc) #to use rcorr()
#install.packages("performance")
library(performance)
#install.packages('see')
#library(see)
dataset1 <- read_csv("https://raw.githubusercontent.com/ajstewartlang/09_glm_regression_pt1/master/data/dataset1.csv")
model_0 <- lm(points ~ 1, data = dataset1)
model_1 <- lm(points ~ investment, data = dataset1)
anova(model_0,model_1)
performance::check_model(model_1)
#Error in grid.Call(C_convert, x, as.integer(whatfrom), as.integer(whatto),  :
#Viewport has zero dimension(s)
crime <- read_csv("https://raw.githubusercontent.com/ajstewartlang/09_glm_regression_pt1/master/data/crime_dataset.csv")
head(crime)
crime <- separate(crime, col = "City, State", into = c("City", "State"))
head(crime)
crime <- crime %>%
rename(House_price = index_nsa) %>%
rename(Violent_Crimes = `Violent Crimes`)
head(crime)
###scatter plot with regression line
crime %>%
ggplot(aes(x = Population, y = Violent_Crimes)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
theme(text = element_text(size = 13)) +
labs(x = "Population", y = "Violent Crimes")
#####Pearson's r
crime %>%
rcorr(Population,Violent_Crimes) #这样写为啥不行啊？
rcorr(crime$Population,crime$Violent_Crimes)
##From the plot, we might conclude that the relationship is being overly influenced by crime in a small number of very large cities
crime_filtered <- filter(crime, Population < 2000000)
crime_filtered %>%
ggplot(aes(x = Population, y = Violent_Crimes)) +
geom_point(alpha = .25) +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
theme(text = element_text(size = 13)) +
labs(x = "Population", y = "Violent Crimes")
rcorr(crime_filtered$Population, crime_filtered$Violent_Crimes)
#For regression, observation should be independent, but each city appears many times (once each year)
#so we just focus on year 2015
crime_filtered <- filter(crime_filtered, Year == 2015)
crime_filtered %>%
ggplot(aes(x=Population, y=Violent_Crimes, label=City)) +
geom_point() +
geom_text(nudge_y = 500, check_overlap = TRUE) +
#this layer is to plot the City names and ensure the lables don't overlap
geom_smooth(method = "lm", se = FALSE) +
xlim(0,1800000) +
theme_minimal() +
theme(text = element_text(size=13)) +
labs(x = "Population",
y = "Violent Crimes")
rcorr(crime_filtered$Population,crime_filtered$Violent_Crimes)
model1 <- lm(Violent_Crimes ~ 1, data = crime_filtered)
model2 <- lm(Violent_Crimes ~ Population, data = crime_filtered)
#worked
check_model(model2, panel = FALSE)
#Didn't work
check_model(model2)
summary(model2)
