family = "binomial")
Accuracy[i-2] <- fit$results$Accuracy
}
plot(3:20, Accuracy, type='b', xlab = 'df')
dfn <- which.max(Accuracy) + 2
dfn
Accuracy[which.max(Accuracy)]
MSE <- rep(0,18)
for (i in 3:20){
Data <- ClassificationData
ClassificationData$Agens <- ns(ClassificationData$Age, df = i)
fit <- train(ShelveLoc ~ Sales + CompPrice + Price + Agens,
method = "glm",
data = ClassificationData,
trControl = train_control,
family = "binomial")
Accuracy[i-2] <- fit$results$Accuracy
}
plot(3:20, Accuracy, type='b', xlab = 'df')
dfn <- which.max(Accuracy) + 2
dfn
Accuracy[which.max(Accuracy)]
MSE <- rep(0,8)
for (i in 3:10){
Data <- ClassificationData
ClassificationData$Agens <- ns(ClassificationData$Age, df = i)
fit <- train(ShelveLoc ~ Sales + CompPrice + Price + Agens,
method = "glm",
data = ClassificationData,
trControl = train_control,
family = "binomial")
Accuracy[i-2] <- fit$results$Accuracy
}
plot(3:10, Accuracy, type='b', xlab = 'df')
MSE <- rep(0,7)
for (i in 3:10){
Data <- ClassificationData
ClassificationData$Agens <- ns(ClassificationData$Age, df = i)
fit <- train(ShelveLoc ~ Sales + CompPrice + Price + Agens,
method = "glm",
data = ClassificationData,
trControl = train_control,
family = "binomial")
Accuracy[i-2] <- fit$results$Accuracy
}
plot(3:10, Accuracy, type='b', xlab = 'df')
Accuracy
Accuracy <- rep(0,7)
for (i in 3:10){
Data <- ClassificationData
ClassificationData$Agens <- ns(ClassificationData$Age, df = i)
fit <- train(ShelveLoc ~ Sales + CompPrice + Price + Agens,
method = "glm",
data = ClassificationData,
trControl = train_control,
family = "binomial")
Accuracy[i-2] <- fit$results$Accuracy
}
plot(3:10, Accuracy, type='b', xlab = 'df')
dfn <- which.max(Accuracy) + 2
dfn
Accuracy[which.max(Accuracy)]
Accuracy<- rep(0,18)
for (i in 3:20){
Data <- ClassificationData
ClassificationData$Agebs <- bs(ClassificationData$Age, df = i)
fit <- train(ShelveLoc ~ Sales + CompPrice + Agebs,
method = "glm",
data = ClassificationData,
trControl = train_control,
family = "binomial")
Accuracy[i-2] <- fit$results$Accuracy
}
plot(3:20, Accuracy, type='b', xlab = 'df')
dfn <- which.max(Accuracy) + 2
dfn
Accuracy[which.max(Accuracy)]
set.seed(1234)
train_control <- trainControl(method="LOOCV")
fit.1 <- train(ShelveLoc ~ Sales + CompPrice + Age,
method = "glm",
data = ClassificationData,
trControl = train_control,
family = "binomial")
fit.2 <- train(ShelveLoc ~ Sales + CompPrice + poly(Age,2),
method = "glm",
data = ClassificationData,
trControl = train_control,
family = "binomial")
fit.3 <- train(ShelveLoc ~ Sales + CompPrice + poly(Age,3),
method = "glm",
data = ClassificationData,
trControl = train_control,
family = "binomial")
fit.4 <- train(ShelveLoc ~ Sales + CompPrice + poly(Age,4),
method = "glm",
data = ClassificationData,
trControl = train_control,
family = "binomial")
fit.5 <- train(ShelveLoc ~ Sales + CompPrice + poly(Age,5),
method = "glm",
data = ClassificationData,
trControl = train_control,
family = "binomial")
fit.6 <- train(ShelveLoc ~ Sales + CompPrice + poly(Age,6),
method = "glm",
data = ClassificationData,
trControl = train_control,
family = "binomial")
fit.7 <- train(ShelveLoc ~ Sales + CompPrice + poly(Age,7),
method = "glm",
data = ClassificationData,
trControl = train_control,
family = "binomial")
fit.8 <- train(ShelveLoc ~ Sales+ CompPrice + poly(Age,8),
method = "glm",
data = ClassificationData,
trControl = train_control,
family = "binomial")
Accuracy <- rep(0,8)
Accuracy[1] <- fit.1$results$Accuracy
Accuracy[2] <- fit.2$results$Accuracy
Accuracy[3] <- fit.3$results$Accuracy
Accuracy[4] <- fit.4$results$Accuracy
Accuracy[5] <- fit.5$results$Accuracy
Accuracy[6] <- fit.6$results$Accuracy
Accuracy[7] <- fit.7$results$Accuracy
Accuracy[8] <- fit.8$results$Accuracy
plot(1:8, Accuracy, type = "b", xlab = "degree")
which.max(Accuracy)
Accuracy[which.max(Accuracy)]
Accuracy <- rep(0,18)
for (i in 3:20){
Data <- ClassificationData
ClassificationData$Agens <- ns(ClassificationData$Age, df = i)
fit <- train(ShelveLoc ~ Sales + CompPrice + Price + Agens,
method = "glm",
data = ClassificationData,
trControl = train_control,
family = "binomial")
Accuracy[i-2] <- fit$results$Accuracy
}
plot(3:20, Accuracy, type='b', xlab = 'df')
dfn <- which.max(Accuracy) + 2
dfn
Accuracy[which.max(Accuracy)]
Accuracy <- rep(0,10)
for (i in 3:13){
Data <- ClassificationData
ClassificationData$Agens <- ns(ClassificationData$Age, df = i)
fit <- train(ShelveLoc ~ Sales + CompPrice + Price + Agens,
method = "glm",
data = ClassificationData,
trControl = train_control,
family = "binomial")
Accuracy[i-2] <- fit$results$Accuracy
}
plot(3:13, Accuracy, type='b', xlab = 'df')
dfn <- which.max(Accuracy) + 2
dfn
Accuracy[which.max(Accuracy)]
Accuracy <- rep(0,10)
for (i in 3:13){
Data <- ClassificationData
ClassificationData$Agens <- ns(ClassificationData$Age, df = i)
fit <- train(ShelveLoc ~ Sales + CompPrice + Agens,
method = "glm",
data = ClassificationData,
trControl = train_control,
family = "binomial")
Accuracy[i-2] <- fit$results$Accuracy
}
plot(3:13, Accuracy, type='b', xlab = 'df')
dfn <- which.max(Accuracy) + 2
dfn
Accuracy[which.max(Accuracy)]
Accuracy[0]
Accuracy[1]
model.ns.3 <- train(ShelveLoc ~ Sales + CompPrice + ns(Age,13),
method = "glm",
data = ClassificationData,
family = "binomial")
plot(effect("Age", mod = model, partial.residuals=TRUE), type="response")
plot(effect("Age", mod = model, partial.residuals=TRUE), type="link")
set.seed(1234)
train_control <- trainControl(method="LOOCV")
fit.1 <- train(ShelveLoc ~ Sales + poly(CompPrice,1),
method = "glm",
data = ClassificationData,
trControl = train_control,
family = "binomial")
fit.2 <- train(ShelveLoc ~ Sales + poly(CompPrice,2),
method = "glm",
data = ClassificationData,
trControl = train_control,
family = "binomial")
fit.3 <- train(ShelveLoc ~ Sales + poly(CompPrice,3),
method = "glm",
data = ClassificationData,
trControl = train_control,
family = "binomial")
fit.4 <- train(ShelveLoc ~ Sales + poly(CompPrice,4),
method = "glm",
data = ClassificationData,
trControl = train_control,
family = "binomial")
fit.5 <- train(ShelveLoc ~ Sales + poly(CompPrice,5),
method = "glm",
data = ClassificationData,
trControl = train_control,
family = "binomial")
fit.6 <- train(ShelveLoc ~ Sales + poly(CompPrice,6),
method = "glm",
data = ClassificationData,
trControl = train_control,
family = "binomial")
fit.7 <- train(ShelveLoc ~ Sales + poly(CompPrice,7),
method = "glm",
data = ClassificationData,
trControl = train_control,
family = "binomial")
fit.8 <- train(ShelveLoc ~ Sales + poly(CompPrice,8),
method = "glm",
data = ClassificationData,
trControl = train_control,
family = "binomial")
Accuracy <- rep(0,8)
Accuracy[1] <- fit.1$results$Accuracy
Accuracy[2] <- fit.2$results$Accuracy
Accuracy[3] <- fit.3$results$Accuracy
Accuracy[4] <- fit.4$results$Accuracy
Accuracy[5] <- fit.5$results$Accuracy
Accuracy[6] <- fit.6$results$Accuracy
Accuracy[7] <- fit.7$results$Accuracy
Accuracy[8] <- fit.8$results$Accuracy
plot(1:8, Accuracy, type = "b", xlab = "degree")
which.max(Accuracy)
Accuracy[which.max(Accuracy)]
model.ns.3 <- train(ShelveLoc ~ Sales + CompPrice + ns(Age,13),
method = "glm",
data = ClassificationData,
family = "binomial")
plot(effect("Age", model.ns.3, partial.residuals=TRUE), type="response")
model.ns.3 <- glm(ShelveLoc ~ Sales + CompPrice + ns(Age,13),
data = ClassificationData,
family = "binomial")
plot(effect("Age", model.ns.3, partial.residuals=TRUE), type="response")
plot(effect("Age", model.ns.3, partial.residuals=TRUE), type="link")
model <- glm(ShelveLoc ~.-CompPrice, data = ClassificationData,
family = binomial)
car::vif(model)
ClassificationData <- Carseats[Carseats$ShelveLoc=="Good"|Carseats$ShelveLoc=="Bad",]
ClassificationData <- ClassificationData[,c(1,2,6,7,8)]
ClassificationData$ShelveLoc <- droplevels(ClassificationData$ShelveLoc)
ClassificationData$ShelveLoc<- factor(ClassificationData$ShelveLoc, levels = c("Bad", "Good"), labels = c('0', '1'))
str(ClassificationData)
model <- glm(ShelveLoc ~., data = ClassificationData,
family = binomial)
car::vif(model)
model <- glm(ShelveLoc ~.-CompPrice, data = ClassificationData,
family = binomial)
car::vif(model)
model <- glm(ShelveLoc ~.-CompPrice-Age, data = ClassificationData,
family = binomial)
car::vif(model)
model <- glm(ShelveLoc ~.-CompPrice, data = ClassificationData,
family = binomial)
car::vif(model)
model <- glm(ShelveLoc ~.-CompPrice-Age, data = ClassificationData,
family = binomial)
car::vif(model)
plot(effect("Price", mod = model, partial.residuals=TRUE), type="link")
plot(effect("Price", mod = model, partial.residuals=TRUE), type="response")
plot(effect("Price", mod = model, partial.residuals=TRUE), type="link")
set.seed(1234)
train_control <- trainControl(method="LOOCV")
fit.1 <- train(ShelveLoc ~ Sales + Price,
method = "glm",
data = ClassificationData,
trControl = train_control,
family = "binomial")
fit.2 <- train(ShelveLoc ~ Sales + poly(Price,2),
method = "glm",
data = ClassificationData,
trControl = train_control,
family = "binomial")
fit.3 <- train(ShelveLoc ~ Sales + poly(Price,3),
method = "glm",
data = ClassificationData,
trControl = train_control,
family = "binomial")
fit.4 <- train(ShelveLoc ~ Sales + poly(Price,4),
method = "glm",
data = ClassificationData,
trControl = train_control,
family = "binomial")
fit.5 <- train(ShelveLoc ~ Sales + poly(Price,5),
method = "glm",
data = ClassificationData,
trControl = train_control,
family = "binomial")
fit.6 <- train(ShelveLoc ~ Sales + poly(Price,6),
method = "glm",
data = ClassificationData,
trControl = train_control,
family = "binomial")
fit.7 <- train(ShelveLoc ~ Sales + poly(Price,7),
method = "glm",
data = ClassificationData,
trControl = train_control,
family = "binomial")
fit.8 <- train(ShelveLoc ~ Sales + poly(Price,8),
method = "glm",
data = ClassificationData,
trControl = train_control,
family = "binomial")
Accuracy <- rep(0,8)
Accuracy[1] <- fit.1$results$Accuracy
Accuracy[2] <- fit.2$results$Accuracy
Accuracy[3] <- fit.3$results$Accuracy
Accuracy[4] <- fit.4$results$Accuracy
Accuracy[5] <- fit.5$results$Accuracy
Accuracy[6] <- fit.6$results$Accuracy
Accuracy[7] <- fit.7$results$Accuracy
Accuracy[8] <- fit.8$results$Accuracy
plot(1:8, Accuracy, type = "b", xlab = "degree")
which.max(Accuracy)
Accuracy[which.max(Accuracy)]
Accuracy<- rep(0,18)
for (i in 3:20){
Data <- ClassificationData
ClassificationData$Pricebs <- bs(ClassificationData$Price, df = i)
fit <- train(ShelveLoc ~ Sales + Pricebs,
method = "glm",
data = ClassificationData,
trControl = train_control,
family = "binomial")
Accuracy[i-2] <- fit$results$Accuracy
}
plot(3:20, Accuracy, type='b', xlab = 'df')
dfn <- which.max(Accuracy) + 2
dfn
Accuracy[which.max(Accuracy)]
Accuracy <- rep(0,10)
for (i in 3:13){
Data <- ClassificationData
ClassificationData$Pricens <- ns(ClassificationData$Price, df = i)
fit <- train(ShelveLoc ~ Sales + Pricens,
method = "glm",
data = ClassificationData,
trControl = train_control,
family = "binomial")
Accuracy[i-2] <- fit$results$Accuracy
}
plot(3:13, Accuracy, type='b', xlab = 'df')
dfn <- which.max(Accuracy) + 2
dfn
Accuracy[which.max(Accuracy)]
model.lm.1 <-glm(ShelveLoc ~ Sales + Price,
data = ClassificationData,
family = "binomial")
model.ns.3 <- glm(ShelveLoc ~ Sales + ns(Price,3),
data = ClassificationData,
family = "binomial")
plot(effect("Age", model.lm.1, partial.residuals=TRUE), type="response")
model.lm.1 <-glm(ShelveLoc ~ Sales + Price,
data = ClassificationData,
family = "binomial")
model.ns.3 <- glm(ShelveLoc ~ Sales + ns(Price,3),
data = ClassificationData,
family = "binomial")
plot(effect("Price", model.lm.1, partial.residuals=TRUE), type="response")
plot(effect("Price", model.lm.1, partial.residuals=TRUE), type="link")
plot(effect("Price", model.ns.3, partial.residuals=TRUE), type="response")
plot(effect("Price", model.ns.3, partial.residuals=TRUE), type="link")
## 0 puts
mod.0 <- glm(ShelveLoc ~ 1,
data = ClassificationData,
family = "binomial")
## 1 puts
mod.1.1 <- glm(ShelveLoc ~ Sales,
data = ClassificationData,
family = "binomial")
mod.1.2 <- glm(ShelveLoc ~ Price,
data = ClassificationData,
family = "binomial")
which.max(c(deviance(mod.1.1), deviance(mod.1.2)))
## 2 puts
mod.2.1 <- glm(ShelveLoc ~ Sales + Price,
data = ClassificationData,
family = "binomial")
## Cross-validation
ClassificationData$const <- rep(0,dim(ClassificationData)[1])
fit.0 <- train(ShelveLoc ~ const,
data = ClassificationData,
method = "glm",
trControl = train_control,
family = "binomial")
fit.1 <- train(ShelveLoc ~ Price,
data = ClassificationData,
method = "glm",
trControl = train_control,
family = "binomial")
fit.2 <- train(ShelveLoc ~ Sales + Price,
data = ClassificationData,
method = "glm",
trControl = train_control,
family = "binomial")
mod.comp <- data.frame(Accuracy = c(fit.0$results$Accuracy,
fit.1$results$Accuracy,
fit.2$results$Accuracy),
Inputs = c(0,1,2))
plot(mod.comp$Inputs, mod.comp$Accuracy, type = "b", xlab = "Number of input variables", ylab = "Accuracy")
dfn_best <- mod.comp$Inputs[which.max(mod.comp$Accuracy)]
dfn_best
fit.QDA <- train(ShelveLoc ~ Sales + Price,
data = ClassificationData,
method = "qda",
trControl = train_control)
fit.KNN <- train(ShelveLoc ~ Sales + Price,
data = ClassificationData,
method = "knn",
trControl = train_control,
preProcess = c("center","scale"))
mod.comp <- data.frame(Accuracy = c(fit.2$results$Accuracy,
fit.QDA$results$Accuracy,
fit.KNN$results$Accuracy[1]),
Inputs = c(0,1,2))
plot(mod.comp$Inputs, mod.comp$Accuracy, type = "b", xlab = "Model", ylab = "Accuracy")
dfn_best <- mod.comp$Inputs[which.max(mod.comp$Accuracy)]
dfn_best
anova(mod.0, mod.1.2, mod.2.1,)
anova(mod.0, mod.1.2, mod.2.1)
summary(mod.2.1)
summary(mod.2.1)
summary(mod.2.1)
model = mod.2.1
summary(model)
exp( coef(model) ) /  ( 1 + exp( coef(model) ) )
model = mod.2.1
summary(model)
plot(effect("Price", mod = model, partial.residuals=TRUE), type="response")
plot(effect("Price", mod = model, partial.residuals=TRUE), type="link")
set.seed(1234)
train_control <- trainControl(method="LOOCV")
fit.1 <- train(ShelveLoc ~ Sales + Price,
method = "glm",
data = ClassificationData,
trControl = train_control,
family = "binomial")
fit.2 <- train(ShelveLoc ~ Sales + poly(Price,2),
method = "glm",
data = ClassificationData,
trControl = train_control,
family = "binomial")
fit.3 <- train(ShelveLoc ~ Sales + poly(Price,3),
method = "glm",
data = ClassificationData,
trControl = train_control,
family = "binomial")
fit.4 <- train(ShelveLoc ~ Sales + poly(Price,4),
method = "glm",
data = ClassificationData,
trControl = train_control,
family = "binomial")
fit.5 <- train(ShelveLoc ~ Sales + poly(Price,5),
method = "glm",
data = ClassificationData,
trControl = train_control,
family = "binomial")
fit.6 <- train(ShelveLoc ~ Sales + poly(Price,6),
method = "glm",
data = ClassificationData,
trControl = train_control,
family = "binomial")
fit.7 <- train(ShelveLoc ~ Sales + poly(Price,7),
method = "glm",
data = ClassificationData,
trControl = train_control,
family = "binomial")
fit.8 <- train(ShelveLoc ~ Sales + poly(Price,8),
method = "glm",
data = ClassificationData,
trControl = train_control,
family = "binomial")
Accuracy <- rep(0,8)
Accuracy[1] <- fit.1$results$Accuracy
Accuracy[2] <- fit.2$results$Accuracy
Accuracy[3] <- fit.3$results$Accuracy
Accuracy[4] <- fit.4$results$Accuracy
Accuracy[5] <- fit.5$results$Accuracy
Accuracy[6] <- fit.6$results$Accuracy
Accuracy[7] <- fit.7$results$Accuracy
Accuracy[8] <- fit.8$results$Accuracy
plot(1:8, Accuracy, type = "b", xlab = "degree")
which.max(Accuracy)
Accuracy[which.max(Accuracy)]
Accuracy<- rep(0,18)
for (i in 3:20){
Data <- ClassificationData
ClassificationData$Pricebs <- bs(ClassificationData$Price, df = i)
fit <- train(ShelveLoc ~ Sales + Pricebs,
method = "glm",
data = ClassificationData,
trControl = train_control,
family = "binomial")
Accuracy[i-2] <- fit$results$Accuracy
}
plot(3:20, Accuracy, type='b', xlab = 'df')
dfn <- which.max(Accuracy) + 2
dfn
Accuracy[which.max(Accuracy)]
